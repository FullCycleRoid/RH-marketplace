import re
from typing import List
from uuid import UUID

from src import (Company, CompanyField, CompanyFieldType, LegalStatus,
                 SystemStatus, ValidationType)
from src.company.infrastructure.repositories.postgres import (
    CompanyPostgresRepository, FieldTypePostgresRepository)


class CompanyService:
    def __init__(
        self,
        repository: CompanyPostgresRepository,
        field_type_repository: FieldTypePostgresRepository,
    ):
        self.repo = repository
        self.field_type_repository = field_type_repository

    def create_company(
        self,
        country_code: str,
        legal_status: LegalStatus = LegalStatus.UNKNOWN,
        system_status: SystemStatus = SystemStatus.AUTOGENERATED,
        fields: dict = None,
    ) -> Company:
        """Создает компанию с валидацией полей"""
        country_fields = self.field_type_repository.get_active_country_requirements(
            country_code
        )
        if not country_fields:
            raise ValueError(f"No legal requirements found for country: {country_code}")

        company = self.repo.create(country_code, legal_status, system_status)

        if fields:
            self._validate_and_add_fields(company, fields, country_fields)

        self.repo.session.commit()
        return company

    def _validate_and_add_fields(
        self, company: Company, fields: dict, field_types: List[CompanyFieldType]
    ):
        """Валидирует и добавляет поля компании"""
        # Получаем обязательные поля
        required_fields = {rf.en_name: rf for rf in field_types if rf.required}

        # Проверяем обязательные поля
        for field_name, field_def in required_fields.items():
            if field_name not in fields:
                raise ValueError(f"Missing required field: {field_name}")

        # Добавляем и валидируем поля
        for field_name, field_data in fields.items():
            field_def = next(
                (rf for rf in required_fields if rf.en_name == field_name), None
            )

            if not field_def:
                raise ValueError(f"Field {field_name} not allowed for this country")

            # Валидация значения
            self._validate_field_value(field_def, field_data)

            # Добавляем поле
            self.repo.add_field(
                company.id,
                field_def.field_type.id,
                ru_data=field_data.get("ru"),
                en_data=field_data.get("en"),
                json_data=field_data.get("data"),
            )

    def _validate_field_value(self, field_def: CompanyField, value: dict):
        """Проверяет значение поля по правилам валидации"""
        for rule in field_def.validation_rules:
            if rule.validation_type == ValidationType.LENGTH:
                max_len = rule.params.get("max_length")
                if len(value.get("ru", "")) > max_len:
                    raise ValueError(
                        f"Field {field_def.field_type.ru_name} exceeds maximum length of {max_len}"
                    )

            elif rule.validation_type == ValidationType.REGEX:
                pattern = re.compile(rule.params.get("pattern"))
                if not pattern.match(value.get("ru", "")):
                    raise ValueError(
                        f"Field {field_def.field_type.ru_name} doesn't match required pattern"
                    )

    def update_company_status(
        self, company_id: UUID, new_status: SystemStatus
    ) -> Company:
        """Обновляет системный статус компании"""
        company = self.repo.get_by_id(company_id)
        if not company:
            raise ValueError("Company not found")

        company.update_system_status(new_status)
        return self.repo.update(company)
