from datetime import datetime
from typing import Optional
from uuid import uuid4

from sqlalchemy import (DECIMAL, Boolean, Column, DateTime, Enum, ForeignKey,
                        Index, Integer, String, Text, UniqueConstraint, func)
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import relationship

from src.company.enums import (ContactType, DataType, EntityType, FieldType,
                               LegalStatus, ManagerType, SystemStatus,
                               TranslationMode, ValidationType)
from src.core.database.declarative_base import Base


class Company(Base):
    __tablename__ = "companies"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    country_code = Column(String(2), nullable=False)
    legal_status = Column(
        Enum(LegalStatus, name="legal_status"),
        nullable=False,
        default=LegalStatus.UNKNOWN,
    )
    system_status = Column(
        Enum(SystemStatus, name="system_status"),
        nullable=False,
        default=SystemStatus.AUTOGENERATED,
    )

    created_at = Column(DateTime(timezone=True), nullable=False, default=func.now())
    updated_at = Column(
        DateTime(timezone=True), nullable=False, default=func.now(), onupdate=func.now()
    )

    fields = relationship(
        "CompanyField", back_populates="company", cascade="all, delete-orphan"
    )
    contacts = relationship(
        "Contact", back_populates="company", cascade="all, delete-orphan"
    )
    managers = relationship(
        "Manager", back_populates="company", cascade="all, delete-orphan"
    )
    financial_reports = relationship(
        "FinancialReport", back_populates="company", cascade="all, delete-orphan"
    )
    tax_reports = relationship(
        "TaxReport", back_populates="company", cascade="all, delete-orphan"
    )
    change_logs = relationship(
        "CompanyChangeLog", back_populates="company", cascade="all, delete-orphan"
    )
    translations = relationship(
        "CompanyTranslation", back_populates="company", cascade="all, delete-orphan"
    )

    okveds = relationship(
        "CompanyOKVED",
        back_populates="company",
        cascade="all, delete-orphan"
    )

    __table_args__ = (
        Index("idx_company_country_system", "country_code", "system_status"),
        Index("idx_company_legal_status", "legal_status"),
        Index("idx_company_system_status", "system_status"),
        Index("idx_company_id", "id"),
    )

    def add_field(
            self,
            company_field_type_id: UUID,
            is_translatable: bool,
            translations: Optional[dict[str, str]] = None,  # Новый параметр для переводов
            json_data: dict = None,
            code: str = None,
            datetime_data: Optional[datetime] = None,
            translation_mode: Optional[TranslationMode] = None,
    ) -> "CompanyField":
        # Создаем поле без ru_data/en_data
        field = CompanyField(
            company_id=self.id,
            company_field_type_id=company_field_type_id,
            json_data=json_data,
            code=code,
            datetime_data=datetime_data,
            is_translatable=is_translatable,
            translation_mode=translation_mode,
        )
        self.fields.append(field)

        # Добавляем переводы, если поле транслируемое
        if is_translatable and translations:
            for lang, data in translations.items():
                field.translations.append(
                    FieldTranslation(
                        language_code=lang,
                        data=data
                    )
                )
        return field

    def add_manager(
            self,
            manager: "Manager",
            translations: Optional[dict[str, str]] = None  # Новый параметр
    ) -> "Manager":
        manager.company_id = self.id
        self.managers.append(manager)

        # Добавляем переводы
        if translations:
            for lang, full_name in translations.items():
                manager.translations.append(
                    ManagerTranslation(
                        language_code=lang,
                        full_name=full_name
                    )
                )

        return manager

    # Новый метод для добавления переводов компании
    def add_translation(
            self,
            language_code: str,
            name: str,
            description: Optional[str] = None,
    ) -> "CompanyTranslation":
        translation = CompanyTranslation(
            company_id=self.id,
            language_code=language_code,
            name=name,
            description=description,
        )
        self.translations.append(translation)
        return translation

    def add_contact(self, contact: "Contact") -> "Contact":
        contact.company_id = self.id
        self.contacts.append(contact)
        return contact

    def add_tax_report(self, tax_report: "TaxReport") -> "TaxReport":
        tax_report.company_id = self.id
        self.tax_reports.append(tax_report)
        return tax_report

    def add_financial_report(
            self, financial_report: "FinancialReport"
    ) -> "FinancialReport":
        financial_report.company_id = self.id
        self.financial_reports.append(financial_report)
        return financial_report

    def update_system_status(self, new_status: SystemStatus):
        """Обновляет системный статус компании"""
        self.system_status = new_status
        return self

    def log_change(
            self,
            entity_type: EntityType,
            entity_id: UUID,
            user_id: int,
            changes: dict,
            reason: str = None,
    ):
        log_entry = CompanyChangeLog(
            company_id=self.id,
            entity_type=entity_type,
            entity_id=entity_id,
            user_id=user_id,
            changes=changes,
            reason=reason,
        )
        self.change_logs.append(log_entry)
        return log_entry


class CompanyTranslation(Base):
    __tablename__ = "company_translations"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    language_code = Column(String(2), nullable=False)
    name = Column(Text, nullable=False)
    description = Column(Text, nullable=True)

    __table_args__ = (
        UniqueConstraint("company_id", "language_code", name="uq_company_lang"),
        Index("idx_company_translation_desc", "description"),
    )

    company = relationship("Company", back_populates="translations")


class CompanyFieldType(Base):
    __tablename__ = "company_field_type"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    country_code = Column(String(2), nullable=False)
    data_type = Column(Enum(DataType, name="data_type"), nullable=False)
    field_type = Column(Enum(FieldType, name="field_type"), nullable=False)
    display_order = Column(Integer, nullable=False)
    required = Column(Boolean, nullable=False, default=False)

    fields = relationship("CompanyField", back_populates="field_type")
    validation_rules = relationship(
        "ValidationRule", back_populates="field", cascade="all, delete-orphan"
    )
    translations = relationship(
        "FieldTypeTranslation", back_populates="field_type", cascade="all, delete-orphan"
    )

    __table_args__ = (
        Index("idx_field_type_country", "country_code"),
        Index("idx_companyfieldtype_id", "id"),
    )


class FieldTypeTranslation(Base):
    __tablename__ = "field_type_translations"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    field_type_id = Column(UUID(as_uuid=True), ForeignKey("company_field_type.id"), nullable=False)
    language_code = Column(String(2), nullable=False)
    name = Column(String(50), nullable=False)
    description = Column(Text, nullable=True)

    __table_args__ = (
        UniqueConstraint("field_type_id", "language_code", name="uq_field_type_lang"),
        Index("idx_ft_translation_name", "name"),
        Index("idx_fieldtypetranslation_composite", "field_type_id", "language_code", "name"),
    )

    field_type = relationship("CompanyFieldType", back_populates="translations")


class ValidationRule(Base):
    __tablename__ = "validation_rules"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_field_type_id = Column(
        UUID(as_uuid=True), ForeignKey("company_field_type.id"), nullable=False
    )
    validation_type = Column(
        Enum(ValidationType, name="validation_type"), nullable=False
    )
    params = Column(JSONB, nullable=False)
    error_code = Column(String(50), nullable=False)

    field = relationship("CompanyFieldType", back_populates="validation_rules")

    __table_args__ = (
        Index("idx_validation_rule_field_type", "company_field_type_id"),
    )


class CompanyField(Base):
    __tablename__ = "company_fields"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    company_field_type_id = Column(
        UUID(as_uuid=True), ForeignKey("company_field_type.id"), nullable=False
    )
    json_data = Column(JSONB, nullable=True)
    code = Column(Text, nullable=True)
    datetime_data = Column(DateTime(timezone=True), nullable=True)
    is_translatable = Column(Boolean, nullable=False, default=False)
    translation_mode = Column(
        Enum(TranslationMode, name="translation_mode"), nullable=True, default=None
    )

    field_type = relationship("CompanyFieldType", back_populates="fields")
    company = relationship("Company", back_populates="fields")
    translations = relationship(
        "FieldTranslation", back_populates="field", cascade="all, delete-orphan"
    )

    __table_args__ = (
        Index("idx_company_field_company_type", "company_id", "company_field_type_id"),
        Index("idx_companyfield_company_id", "company_id"),  # Новый индекс
        Index("idx_companyfield_type_id", "company_field_type_id"),
    )


class FieldTranslation(Base):
    __tablename__ = "field_translations"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    field_id = Column(UUID(as_uuid=True), ForeignKey("company_fields.id"), nullable=False)
    language_code = Column(String(2), nullable=False)
    data = Column(Text, nullable=True)

    __table_args__ = (
        UniqueConstraint("field_id", "language_code", name="uq_field_lang"),
        Index("idx_field_translation_data", "data"),
        Index("idx_fieldtranslation_composite", "field_id", "language_code", "data"),
    )

    field = relationship("CompanyField", back_populates="translations")

class CompanyOKVED(Base):
    __tablename__ = "company_m2m_okved"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    okved_id = Column(Integer, ForeignKey("okved_nodes.id"), nullable=False)

    company = relationship("Company", back_populates="okveds")
    okved = relationship("OkvedNode", back_populates="companies")

class Manager(Base):
    __tablename__ = "managers"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    position = Column(Enum(ManagerType, name="manager_type"), nullable=False)
    inn = Column(Text, nullable=True)
    since_on_position = Column(DateTime(timezone=True), nullable=True)

    company = relationship("Company", back_populates="managers")
    translations = relationship(
        "ManagerTranslation", back_populates="manager", cascade="all, delete-orphan"
    )

    __table_args__ = (
        Index("idx_manager_inn", "inn"),
        Index("idx_manager_position", "position"),
    )


class ManagerTranslation(Base):
    __tablename__ = "manager_translations"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    manager_id = Column(UUID(as_uuid=True), ForeignKey("managers.id"), nullable=False)
    language_code = Column(String(2), nullable=False)
    full_name = Column(Text, nullable=True)

    __table_args__ = (
        UniqueConstraint("manager_id", "language_code", name="uq_manager_lang"),
        Index("idx_manager_translation_name", "full_name"),
    )

    manager = relationship("Manager", back_populates="translations")


class Contact(Base):
    __tablename__ = "contacts"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    type = Column(Enum(ContactType, name="contact_type"), nullable=False)
    data = Column(Text, nullable=False)
    is_verified = Column(Boolean, nullable=False, default=False)

    company = relationship("Company", back_populates="contacts")

    __table_args__ = (
        Index("idx_contact_company_type", "company_id", "type"),
    )


class FinancialReport(Base):
    __tablename__ = "financial_reports"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    year = Column(Integer, nullable=False)
    annual_income = Column(DECIMAL(20, 2), nullable=True)
    net_profit = Column(DECIMAL(20, 2), nullable=True)
    currency = Column(String(3), nullable=False)

    company = relationship("Company", back_populates="financial_reports")

    __table_args__ = (
        Index("idx_financial_report_company_year", "company_id", "year"),
    )


class TaxReport(Base):
    __tablename__ = "tax_reports"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    year = Column(Integer, nullable=False)
    taxes_paid = Column(Text, nullable=True)
    paid_insurance = Column(Text, nullable=True)

    company = relationship("Company", back_populates="tax_reports")

    __table_args__ = (
        Index("idx_tax_report_company_year", "company_id", "year"),
    )


class CompanyChangeLog(Base):
    __tablename__ = "company_change_log"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    entity_type = Column(Enum(EntityType, name="entity_type"), nullable=False)
    entity_id = Column(UUID(as_uuid=True), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, default=func.now())
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    reason = Column(Text)
    changes = Column(JSONB, nullable=False)

    company = relationship("Company", back_populates="change_logs")

    __table_args__ = (
        Index("idx_change_log_company_timestamp", "company_id", "timestamp"),
    )