from datetime import datetime
from typing import Optional
from uuid import uuid4

from sqlalchemy import (DECIMAL, Boolean, Column, DateTime, Enum, ForeignKey,
                        Index, Integer, String, Text, UniqueConstraint, func)
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import relationship

from src.company.enums import (ContactType, DataType, EntityType, FieldType,
                               LegalStatus, ManagerType, SystemStatus,
                               TranslationMode, ValidationType)
from src.core.database.declarative_base import Base



class Company(Base):
    __tablename__ = "companies"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    country_code = Column(String(2), nullable=False)
    legal_status = Column(
        Enum(LegalStatus, name="legal_status"),
        nullable=False,
        default=LegalStatus.UNKNOWN,
    )
    system_status = Column(
        Enum(SystemStatus, name="system_status"),
        nullable=False,
        default=SystemStatus.AUTOGENERATED,
    )
    created_at = Column(DateTime(timezone=True), nullable=False, default=func.now())
    updated_at = Column(
        DateTime(timezone=True), nullable=False, default=func.now(), onupdate=func.now()
    )

    fields = relationship(
        "CompanyField", back_populates="company", cascade="all, delete-orphan"
    )

    contacts = relationship(
        "Contact", back_populates="company", cascade="all, delete-orphan"
    )
    managers = relationship(
        "Manager", back_populates="company", cascade="all, delete-orphan"
    )

    financial_reports = relationship(
        "FinancialReport", back_populates="company", cascade="all, delete-orphan"
    )
    tax_reports = relationship(
        "TaxReport", back_populates="company", cascade="all, delete-orphan"
    )

    change_logs = relationship(
        "CompanyChangeLog", back_populates="company", cascade="all, delete-orphan"
    )

    __table_args__ = (
        Index("idx_company_country_code", country_code),
        Index("idx_legal_status", legal_status),
    )

    def add_field(
        self,
        company_field_type_id: UUID,
        is_translatable: bool,
        ru_data: Optional[str] = None,
        en_data: Optional[str] = None,
        json_data: dict = None,
        datetime_data: Optional[datetime] = None,
        translation_mode: Optional[TranslationMode] = None,
    ):
        field = CompanyField(
            company_id=self.id,
            company_field_type_id=company_field_type_id,
            ru_data=ru_data,
            en_data=en_data,
            json_data=json_data,
            datetime_data=datetime_data,
            is_translatable=is_translatable,
            translation_mode=translation_mode,
        )
        self.fields.append(field)
        return field

    def add_manager(self, manager: "Manager") -> "Manager":
        manager.company_id = self.id
        self.managers.append(manager)
        return manager

    def add_contact(self, contact: "Contact") -> "Contact":
        contact.company_id = self.id
        self.contacts.append(contact)
        return contact

    def add_tax_report(self, tax_report: "TaxReport") -> "TaxReport":
        tax_report.company_id = self.id
        self.tax_reports.append(tax_report)
        return tax_report

    def add_financial_report(
        self, financial_report: "FinancialReport"
    ) -> "FinancialReport":
        financial_report.company_id = self.id
        self.financial_reports.append(financial_report)
        return financial_report

    def update_system_status(self, new_status: SystemStatus):
        """Обновляет системный статус компании"""
        self.system_status = new_status
        return self

    def log_change(
        self,
        entity_type: EntityType,
        entity_id: UUID,
        user_id: int,
        changes: dict,
        reason: str = None,
    ):
        log_entry = CompanyChangeLog(
            company_id=self.id,
            entity_type=entity_type,
            entity_id=entity_id,
            user_id=user_id,
            changes=changes,
            reason=reason,
        )
        self.change_logs.append(log_entry)
        return log_entry


class CompanyFieldType(Base):
    __tablename__ = "company_field_type"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)

    country_code = Column(String(2), nullable=False)
    ru_name = Column(String(50), nullable=False, unique=True)
    en_name = Column(String(50), nullable=False, unique=True)

    ru_description = Column(Text, nullable=True)
    en_description = Column(Text, nullable=True)

    data_type = Column(Enum(DataType, name="data_type"), nullable=False)
    field_type = Column(Enum(FieldType, name="field_type"), nullable=False)
    display_order = Column(Integer, nullable=False)
    required = Column(Boolean, nullable=False, default=False)

    fields = relationship("CompanyField", back_populates="field_type")
    validation_rules = relationship(
        "ValidationRule", back_populates="field", cascade="all, delete-orphan"
    )

    __table_args__ = (UniqueConstraint("ru_name", name="uq_company_field_type"),)


class ValidationRule(Base):
    __tablename__ = "validation_rules"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_field_type_id = Column(
        UUID(as_uuid=True), ForeignKey("company_field_type.id"), nullable=False
    )
    validation_type = Column(
        Enum(ValidationType, name="validation_type"), nullable=False
    )
    params = Column(JSONB, nullable=False)
    error_code = Column(String(50), nullable=False)

    field = relationship("CompanyFieldType", back_populates="validation_rules")


class CompanyField(Base):
    __tablename__ = "company_fields"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    company_field_type_id = Column(
        UUID(as_uuid=True), ForeignKey("company_field_type.id"), nullable=False
    )

    en_data = Column(Text, nullable=True)
    ru_data = Column(Text, nullable=True)

    json_data = Column(JSONB, nullable=True)
    datetime_data = Column(DateTime(timezone=True), nullable=True)

    is_translatable = Column(Boolean, nullable=False, default=False)
    translation_mode = Column(
        Enum(TranslationMode, name="translation_mode"), nullable=True, default=None
    )

    field_type = relationship("CompanyFieldType", back_populates="fields")
    company = relationship("Company", back_populates="fields")


class CompanyOKVED(Base):
    __tablename__ = "company_m2m_okved"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    okved_id = Column(Integer, ForeignKey("okved_nodes.id"), nullable=False)


class Manager(Base):
    __tablename__ = "managers"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)

    position = Column(Enum(ManagerType, name="manager_type"), nullable=False)
    inn = Column(Text, nullable=True)

    full_name = Column(Text, nullable=True)
    en_full_name = Column(Text, nullable=True)

    since_on_position = Column(DateTime(timezone=True), nullable=True)

    company = relationship("Company", back_populates="managers")


class Contact(Base):
    __tablename__ = "contacts"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    type = Column(Enum(ContactType, name="contact_type"), nullable=False)
    data = Column(Text, nullable=False)

    is_verified = Column(Boolean, nullable=False, default=False)

    company = relationship("Company", back_populates="contacts")


class FinancialReport(Base):
    __tablename__ = "financial_reports"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    year = Column(Integer, nullable=False)
    annual_income = Column(DECIMAL(20, 2), nullable=True)
    net_profit = Column(DECIMAL(20, 2), nullable=True)
    currency = Column(String(3), nullable=False)

    company = relationship("Company", back_populates="financial_reports")


class TaxReport(Base):
    __tablename__ = "tax_reports"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    year = Column(Integer, nullable=False)
    taxes_paid = Column(Text, nullable=True)
    paid_insurance = Column(Text, nullable=True)

    company = relationship("Company", back_populates="tax_reports")


class CompanyChangeLog(Base):
    __tablename__ = "company_change_log"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    company_id = Column(UUID(as_uuid=True), ForeignKey("companies.id"), nullable=False)
    entity_type = Column(Enum(EntityType, name="entity_type"), nullable=False)
    entity_id = Column(UUID(as_uuid=True), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, default=func.now())
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    reason = Column(Text)
    changes = Column(JSONB, nullable=False)

    company = relationship("Company", back_populates="change_logs")
