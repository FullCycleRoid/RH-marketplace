from typing import List, Optional
from uuid import UUID

from sqlalchemy import func
from sqlalchemy.ext.asyncio import AsyncSession

from src import (Company, CompanyField, CompanyFieldType, LegalStatus,
                 SystemStatus)


class CompanyPostgresRepository:
    def __init__(self, session: AsyncSession):
        self.session = session

    def create(
        self,
        country_code: str,
        legal_status: LegalStatus = LegalStatus.UNKNOWN,
        system_status: SystemStatus = SystemStatus.AUTOGENERATED,
    ) -> Company:
        """Создает новую компанию"""
        company = Company(
            country_code=country_code,
            legal_status=legal_status,
            system_status=system_status,
        )
        self.session.add(company)
        self.session.flush()
        return company

    def get_by_id(self, company_id: UUID) -> Optional[Company]:
        """Получает компанию по UUID"""
        return self.session.query(Company).get(company_id)

    def update(self, company: Company) -> Company:
        """Обновляет данные компании"""
        company.updated_at = func.now()
        self.session.commit()
        return company

    def add_field(
        self,
        company_id: UUID,
        field_type_id: UUID,
        ru_data: str = None,
        en_data: str = None,
        json_data: dict = None,
    ) -> CompanyField:
        """Добавляет поле к компании"""
        company = self.get_by_id(company_id)
        if not company:
            raise ValueError("Company not found")

        field = company.add_field(
            company_field_type_id=field_type_id,
            ru_data=ru_data,
            en_data=en_data,
            json_data=json_data,
        )
        self.session.commit()
        return field


class FieldTypePostgresRepository:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_active_country_requirements(
        self, country_code: str
    ) -> List[CompanyFieldType]:
        return self.session.query(CompanyFieldType).get(country_code)
